{
  "language": "Solidity",
  "sources": {
    "contracts/mocks/DAI.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\ncontract LibNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed usr,\n        bytes32 indexed arg1,\n        bytes32 indexed arg2,\n        bytes data\n    ) anonymous;\n\n    modifier note() {\n        _;\n        // assembly {\n        //     // log an 'anonymous' event with a constant 6 words of calldata\n        //     // and four indexed topics: selector, caller, arg1 and arg2\n        //     let mark := msize()                         // end of memory ensures zero\n        //     mstore(0x40, add(mark, 288))              // update free memory pointer\n        //     mstore(mark, 0x20)                        // bytes type data offset\n        //     mstore(add(mark, 0x20), 224)              // bytes size (padded)\n        //     calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n        //     log4(mark, 288,                           // calldata\n        //          shl(224, shr(224, calldataload(0))), // msg.sig\n        //          caller(),                              // msg.sender\n        //          calldataload(4),                     // arg1\n        //          calldataload(36)                     // arg2\n        //         )\n        // }\n    }\n}\n\ninterface IDAI {\n    // --- Auth ---\n    function wards() external returns (uint256);\n\n    function rely(address guy) external;\n\n    function deny(address guy) external;\n\n    // --- Token ---\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n\n    function mint(address usr, uint256 wad) external;\n\n    function burn(address usr, uint256 wad) external;\n\n    function approve(address usr, uint256 wad) external returns (bool);\n\n    // --- Alias ---\n    function push(address usr, uint256 wad) external;\n\n    function pull(address usr, uint256 wad) external;\n\n    function move(\n        address src,\n        address dst,\n        uint256 wad\n    ) external;\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/dai.sol\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.5.12; */\n\n/* import \"./lib.sol\"; */\n\ncontract DAI is LibNote {\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n\n    // --- Auth ---\n    mapping(address => uint256) public wards;\n\n    function rely(address guy) external note auth {\n        wards[guy] = 1;\n    }\n\n    function deny(address guy) external note auth {\n        wards[guy] = 0;\n    }\n\n    modifier auth() {\n        require(wards[msg.sender] == 1, \"Dai/not-authorized\");\n        _;\n    }\n\n    // --- ERC20 Data ---\n    string public constant name = \"Dai Stablecoin\";\n    string public constant symbol = \"DAI\";\n    string public constant version = \"1\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    uint256 public dailyDAILimit;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) private allowances;\n    mapping(address => uint256) public nonces;\n    mapping(address => uint256) public lastMintRestart;\n    mapping(address => uint256) public daiMintedToday;\n\n    // event Approval(address indexed src, address indexed guy, uint wad);\n    // event Transfer(address indexed src, address indexed dst, uint wad);\n\n    // --- Math ---\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    constructor(uint256 chainId_) {\n        wards[msg.sender] = 1;\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainId_,\n                address(this)\n            )\n        );\n        dailyDAILimit = 10000000000000000000000;\n    }\n\n    function allowance(address account_, address sender_) external view returns (uint256) {\n        return _allowance(account_, sender_);\n    }\n\n    function _allowance(address account_, address sender_) internal view returns (uint256) {\n        return allowances[account_][sender_];\n    }\n\n    // --- Token ---\n    function transfer(address dst, uint256 wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad, \"Dai/insufficient-balance\");\n        if (src != msg.sender && _allowance(src, msg.sender) != uint256(-1)) {\n            require(_allowance(src, msg.sender) >= wad, \"Dai/insufficient-allowance\");\n            allowances[src][msg.sender] = sub(_allowance(src, msg.sender), wad);\n        }\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n\n    function addAuth(address usr) external auth {\n        wards[usr] = 1;\n    }\n\n    function adjustDailyDAILimit(uint256 _limit) external auth {\n        dailyDAILimit = _limit;\n    }\n\n    function mint(address usr, uint256 wad) external {\n        if (wards[msg.sender] == 0) {\n            require(\n                add(wad, daiMintedToday[msg.sender]) <= dailyDAILimit ||\n                    (sub(block.number, lastMintRestart[msg.sender]) >= 6500 && wad <= dailyDAILimit),\n                \"Over daily DAI Limit\"\n            );\n            if (sub(block.number, lastMintRestart[msg.sender]) >= 6500) {\n                daiMintedToday[msg.sender] = wad;\n                lastMintRestart[msg.sender] = block.number;\n            } else {\n                daiMintedToday[msg.sender] = add(daiMintedToday[msg.sender], wad);\n            }\n        }\n\n        balanceOf[usr] = add(balanceOf[usr], wad);\n\n        totalSupply = add(totalSupply, wad);\n\n        emit Transfer(address(0), usr, wad);\n    }\n\n    function burn(address usr, uint256 wad) external {\n        require(balanceOf[usr] >= wad, \"Dai/insufficient-balance\");\n        if (usr != msg.sender && _allowance(usr, msg.sender) != uint256(-1)) {\n            require(_allowance(usr, msg.sender) >= wad, \"Dai/insufficient-allowance\");\n            allowances[usr][msg.sender] = sub(_allowance(usr, msg.sender), wad);\n        }\n        balanceOf[usr] = sub(balanceOf[usr], wad);\n        totalSupply = sub(totalSupply, wad);\n        emit Transfer(usr, address(0), wad);\n    }\n\n    function _approve(address usr, uint256 wad) internal returns (bool) {\n        allowances[msg.sender][usr] = wad;\n\n        emit Approval(msg.sender, usr, wad);\n        return true;\n    }\n\n    function approve(address usr_, uint256 wad_) external returns (bool) {\n        return _approve(usr_, wad_);\n    }\n\n    // --- Alias ---\n    function push(address usr, uint256 wad) external {\n        transferFrom(msg.sender, usr, wad);\n    }\n\n    function pull(address usr, uint256 wad) external {\n        transferFrom(usr, msg.sender, wad);\n    }\n\n    function move(\n        address src,\n        address dst,\n        uint256 wad\n    ) external {\n        transferFrom(src, dst, wad);\n    }\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\n            )\n        );\n\n        require(holder != address(0), \"Dai/invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\n        require(expiry == 0 || block.timestamp <= expiry, \"Dai/permit-expired\");\n        require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\n        uint256 wad = allowed ? uint256(-1) : 0;\n        allowances[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}